""" 
@Hipotesis 
There exist at least one subgraph which can be elimianted from the graph such that the grapg is still valid

@Methodology
Compute for many graphs, the number of paths from any source to any sink, removing 1 node.
Since we cannot tell which node to remove, we will try all possible options. 

For a graph of n nodes we need n iterations and for each iteration we get all possbile paths with a DFS algorithm.

@Dataset
We will consider the attack graphs generated by SAGE from the 

@Expected
The number of paths will drop significantly after removing one node



@Results
16 out of the 52 graphs have a subgraf g such that |g| > 0

"""

import AGIAS
import os
import pathlib
import shutil

#Cleanup
try:
    mydir = pathlib.Path( 'Results' )
    shutil.rmtree( mydir )
except:
    print("Could not delete Results folder")

os.mkdir("Results")

#Parser setup
parser = AGIAS.DotParser(AGIAS.SAGEDataLabelParser())
non_zero_path_graphs = 0
total_graphs = 0

for file in os.listdir('AG'):
    if file.endswith('.dot'):
        total_graphs += 1
        result_file = open("Results/" + file[ : -4] + ".txt", "x")
        graph = parser.parseFromFile("AG/" + file) 
        # eliminate nodes one by one
        total_paths_found = 0
        for node in graph._nodes:
            paths = graph.computeNumberOfPathsFromSourcesToSinkIgnore([node._id])
            result_file.write("Eliminated node: " + str(node._id) + ":" + str(paths) + "\r\n")
            total_paths_found += paths
        if total_paths_found >0:
            non_zero_path_graphs += 1
        result_file.write("Total paths found: " + str(total_paths_found) + "\r\n")

print("Total number of graphs computer:" + str(total_graphs))
print("Number of graphs that have a subgraph " + str(non_zero_path_graphs))
 